#include <stdio.h>   題1
#include <stdlib.h>

#define SIZE 20

void fun(int a[],int s[],int size);
void fun2(int a[],int s[],int ID,int size);
int binarySearch(const int a[],int ID,int low,int high);
int i,pass,ID,score;
int main(void){
	int a[SIZE]={12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37};
	int s[SIZE]={66,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,66,90,11,66};
	puts("Data items in original order");
	for (i=0;i<SIZE;++i){
		printf("%4d",a[i]);
	}
	printf("\n");
	for (i=0;i<SIZE;++i){
		printf("%4d",s[i]);
	}
	fun(a,s,SIZE);
	puts("\nData items in ascending order");
	for(i=0;i<SIZE;++i){
		printf("%4d",a[i]);
	}
	printf("\n");
	for (i=0;i<SIZE;++i){
		printf("%4d",s[i]);
	}
	printf("\n請輸入學號:");
	scanf("%d",&ID);
	fun2(a,s,ID,SIZE);
	puts("");
	printf("\n請輸入成績:");
	scanf("%d",&score);
	int result = binarySearch(s,score,0,SIZE-1);
	if (result != -1){
		printf("\n%d found at subscript %d\n",score,a[result]);
	}
	else{
		printf("\n%d not found\n",score);
	}
}


void fun(int a[],int s[],int size){
	int hold;
	for(pass=1;pass<SIZE;++pass){
		for(i=0;i<SIZE-1;++i){
			if(s[i]>s[i+1]){
				hold = s[i];
				s[i] = s[i+1];
				s[i+1] = hold;
				hold = a[i];
				a[i] = a[i+1];
				a[i+1] = hold;
			}
		}
	}
}

void fun2(int a[],int s[],int ID,int size){
	for(i=0;i<SIZE;++i){
		if(ID==a[i]){
			printf("student %d score is %d",a[i],s[i]);
			break;
		}
		else{
			if(i>=19)
			printf("student %d is not our student",ID);		
		}
	}

}

int binarySearch(const int a[],int ID,int low,int high)
{
	while (low <=high){
		int mid;
		mid = (low +high)/2;
		if (ID == a[mid]){
			return mid;
		}
		else if (ID< a[mid]){
			high = mid-1;
		}
		else{
			low = mid+1;
		}
	}
	return -1;
}
-----------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#define SIZE 20
int lost2(int x[], int key, int low, int high);
void lost(int n[], int x[]);
int main(void) {
    int ava;
    int total = 0;

    int i;
    int n[SIZE] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 };
    int x[SIZE] = { 66,55,66,89,73,90,75,63,62,80,56,45,85,86,42,74,65,46,77,91, };
    printf("before\n");
    for (i = 0; i < SIZE; ++i)
        printf("%d ", n[i]);
    printf("\n");
    for (i = 0; i < SIZE; ++i)
        printf("%d ", x[i]);
    printf("\n");

    lost(n, x);
    printf("after\n");
    for (i = 0; i < SIZE; ++i)
        printf("%d ", n[i]);
    printf("\n");
    for (i = 0; i < SIZE; ++i)
        printf("%d ", x[i]);

    printf("\n");




    for (i = 0; i < SIZE; ++i)
        total += x[i];
    ava = total / SIZE;
    printf("平均數是%d ", ava);
    printf("中位數是%d ", x[SIZE / 2]);



    int key;
    printf("\nenter ur number");
    scanf_s("%d", &key);
    lost2(x, key, 0, SIZE - 1);
    if (lost2(x, key, 0, SIZE - 1) == -1)
        printf("找不到");
    else {
        printf("座號%d分數為%d", n[lost2(x, key, 0, SIZE - 1)], key);
    }


}

void lost(int n[], int x[]) {
    int hold, pass, i;
    for (pass = 1; pass < SIZE; ++pass) {
        for (i = 0; i < SIZE - pass; ++i) {
            if (x[i] > x[i + 1]) {
                hold = x[i];
                x[i] = x[i + 1];
                x[i + 1] = hold;
                hold = n[i];
                n[i] = n[i + 1];
                n[i + 1] = hold;
            }
        }
    }
}
int lost2(int x[], int key, int low, int high) {
    int mid;
    while (low <= high) {
        mid = (low + high) / 2;
        if (key == x[mid])
            return mid;
        else if (key < x[mid])
            high = mid - 1;
        else
            low = mid + 1;
    }
    return -1;
}
---------------------------------------------------------------------------------------------------------------------------------------
