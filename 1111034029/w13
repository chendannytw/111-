#include <stdio.h> 題一
#define SIZE 20
int binarySearch(int b[], int searchKey, int low, int high);
void sort(int a[], int c[], int size);
void swap(int* ni, int* mi);

// function main begins program execution
int main(void)
{
    int key, result = 0;
    // initialize a
    int a[SIZE] = { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 };
    int c[SIZE] = { 66,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,66,90,11,77 };

    puts("Data items in original order");
    // output original array
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", a[i]);
    }
    printf("\n");
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", c[i]);
    }

    // bubble sort                                         
    // loop to control number of passes                    

    sort(a, c, SIZE);
    puts("\nData items in ascending order");

    // output sorted array
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", a[i]);
    }
    printf("\n");
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", c[i]);
    }

    puts("");
    printf("請輸入您要的成績");
    scanf_s("%d", &key);
    result = binarySearch(c, key, 0, SIZE - 1);
    if (result < 0)
        printf("查無此成績!!");
    else printf("成績為%d的同學的學號為: %d", key, a[result]);


}


void sort(int a[], int c[], int size)
{
    int hold;
    for (unsigned int pass = 1; pass < SIZE; ++pass) {

        // loop to control number of comparisons per pass   
        for (size_t i = 0; i < size - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (c[i] > c[i + 1]) {
                swap(&c[i], &c[i + 1]);
                swap(&a[i], &a[i + 1]);
            }
        }
    }

}

void swap(int* ni, int* mi)
{
    int nod;
    nod = *ni;
    *ni = *mi;
    *mi = nod;
}

int binarySearch(int b[], int searchKey, int low, int high)
{
    // loop until low index is greater than high index
    while (low <= high) {

        // determine middle element of subarray being searched
        size_t middle = (low + high) / 2;

        // display subarray used in this loop iteration
        //printRow(b, low, middle, high);

        // if searchKey matched middle element, return middle
        if (searchKey == b[middle]) {
            return middle;
        }

        // if searchKey is less than middle element, set new high
        else if (searchKey < b[middle]) {
            high = middle - 1; // search low end of array      
        }

        // if searchKey is greater than middle element, set new low
        else {
            low = middle + 1; // search high end of array        
        }
    } // end while

    return -1; // searchKey not found
}
-------------------------------------------------------------------------
#include <stdio.h>題二
#define SIZE 20

void sort(int a[][SIZE], int size);
void swap(int* e1, int* e2);
// function main begins program execution
int main(void)
{
    int key, result = 0, i;
    // initialize a
    int a[2][SIZE] = { { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 } ,
                    { 66,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,66,90,11,66 } };

    puts("Data items in original order");

    // output original array
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[0][i]);
    }
    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }

    // bubble sort                                         
    // loop to control number of passes                    

    sort(a, SIZE);

    puts("\nData items in ascending order");

    // output sorted array
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[0][i]);
    }
    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }
}


void sort(int a[][SIZE], int size)
{
    int hold, pass, i;
    for (pass = 1; pass < SIZE; ++pass) {

        // loop to control number of comparisons per pass   
        for (i = 0; i < size - pass; ++i) {


            if (a[1][i] > a[i][i + 1]) {
                swap(&a[1][i], &a[1][i + 1]);
                swap(&a[0][i], &a[0][i + 1]);
            }
        }
    }
}

void swap(int* e1, int* e2) {
    int hold = *e1;
    *e1 = *e2;
    *e2 = hold;
