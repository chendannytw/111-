#include <stdio.h>
#define SIZE 20

void sort(int a[][SIZE], int size);
void swap(int* elemext1Ptr, int* elemext2Ptr);
// function main begins program execution
int main(void)
{
    int key, result = 0, i;
    // initialize a
    int a[2][SIZE] = { { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 } ,
                    { 66,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,66,90,11,66 } };

    puts("Data items in original order");

    // output original array
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[0][i]);
    }
    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }

    // bubble sort                                         
    // loop to control number of passes                    

    sort(a, SIZE);

    puts("\nData items in ascending order");

    // output sorted array
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[0][i]);
    }
    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }
}


void sort(int a[][SIZE], int size)
{
    int hold, pass, i;
    for (pass = 1; pass < SIZE; ++pass) {

        // loop to control number of comparisons per pass   
        for (i = 0; i < size - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (a[1][i] > a[i][i + 1]) {
                swap(&a[1][i], &a[1][i + 1]);
                swap(&a[0][i], &a[0][i + 1]);
            }
        }
    }
}

void swap(int* ele1Ptr, int* ele2Ptr) {
    int hold = *ele1Ptr;
    *ele1Ptr = *ele2Ptr;
    *ele2Ptr = hold;
}
