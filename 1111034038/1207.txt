#include <stdio.h>
#define SIZE 20
int binarySearch(int k[][SIZE], int searchKey, int low, int high);
void sort(int l[][SIZE], int size);
void swap(int *elementPtr, int *elementPtr2);
int median (int d[][SIZE]);
int c(int x[][SIZE]);
// function main begins program execution
int main(void)
{
    int key, result = 0;
    int total = 0;
    int medianx = 0;
    //int a[SIZE] = { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 };
    //int c[SIZE] = { 65,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,64,90,11,68 };
    int b[2][SIZE] = { { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 } ,{ 65,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,64,90,11,68 } };
    puts("Data items in original order");
 
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", b[0][i]);
    }
    printf("\n");
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", b[1][i]);
    }
    total = c(b);
    printf("\navg:%4f", total / SIZE);
    sort(b, SIZE);
    puts("\nData items in ascending order");

    
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", b[0][i]);
    }
    printf("\n");
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", b[1][i]);
    }

    puts("");
    printf("請輸入您要的成績");
    scanf_s("%d", &key);
    result = binarySearch(b, key, 0, SIZE - 1);
    if (result < 0)
        printf("查無此成績!!");
    else printf("成績為%d的同學的學號為: %d", key, b[0][result]);

}


void sort(int l[][SIZE], int size)
{
    int hold;
    for (unsigned int pass = 1; pass < SIZE; ++pass) {

        for (size_t i = 0; i < size - pass; ++i) {
      
            if (l[1][i] > l[1][i+1]) {
                swap(&l[1][i], &l[1][i+1]);
                swap(&l[0][i], &l[0][i + 1]);
            }
        }
    }

}

int binarySearch(int k[][SIZE], int searchKey, int low, int high)
{
    
    while (low <= high) {

        
        size_t middle = (low + high) / 2;

        

       
        if (searchKey == k[1][middle]) {
            return middle;
        }

        
        else if (searchKey < k[1][middle]) {
            high = middle - 1;   
        }

     
        else {
            low = middle + 1;     
        }
    } 

    return -1;
}


void swap(int *elementPtr, int *elementPtr2)
{
    int hold = *elementPtr;
    *elementPtr = *elementPtr2;
    *elementPtr2 = hold;
}
int median(int d[][SIZE]) {
    return d[1][SIZE / 2]; 
}

int c(int x[1][SIZE])
{
    int i = 0, c = 0;
    for (i = 0; i < SIZE; ++i) {
        c += x[1][i];

    }
    return c;
}