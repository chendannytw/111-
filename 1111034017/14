#include <stdio.h>
#define SIZE 4
#define stu 10
//int binarySearch(int b[], int searchKey, int low, int high);
void sort(const char *name[10],int a[][SIZE], int size);
// function main begins program execution
int main(void)
{ 
    int key,result=0,i,j;
    // initialize a
    int a[10][SIZE] = { {2,98,72,0},
						{3,76,32,0},
						{6,98,67,0},
						{7,89,32,0},
						{8,98,55,0},
						{9,89,32,0},
						{10,98,65,0},
						{11,99,32,0},
						{12,98,71,0},
						{13,76,91,0}};

    const char *name[10]=
    {"A",
	 "B",
  	 "C",
	 "D",
	 "E",
	 "F",
 	 "G",
	 "H",
	 "I",
	 "J"};

    puts("Name ID items in original order");
    // output original array
    for(j=0;j<10;j++)
    {	for (i = 1; i < SIZE-1; ++i) {
        	a[j][3]+=a[j][i];
    	}
	}
    
    for(j=0;j<10;j++)
    {	
    printf("%8s", name[j]);
	printf("%4d", a[j][i]);
	for (i = 0; i < SIZE; ++i) {
        	printf("%4d", a[j][i]);
    	}
    	printf("\n");
	}
    
/*    printf("\n");
    for (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }
*/
    // bubble sort                                         
    // loop to control number of passes                    

    sort(name, a, stu);
    puts("\nData items in ascending order");

    for(j=0;j<10;j++)
    { printf("%8s", name[j]);	
	for (i = 0; i < SIZE; ++i) {
        	printf("%4d", a[j][i]);
    	}
    	printf("\n");
	}

}


void sort(const char *name[10],int a[][SIZE], int size)
{char*ptr;
    int hold,pass,i;
    for (pass = 1; pass < size; ++pass) {

        // loop to control number of comparisons per pass   
        for (i = 0; i < size - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (a[i][3] > a[i + 1][3]) {
            	ptr=name[i];
            	name[i]=name[i+1];
            	name[i+1]=ptr;
                swap(&a[i][0], &a[i+1][0]);
                swap(&a[i][1], &a[i+1][1]);
                swap(&a[i][2], &a[i+1][2]);
                swap(&a[i][3], &a[i+1][3]);
            }
        }
    }

}

void swap(int *e1Ptr,int*e2Ptr)
{int hold;
hold=*e1Ptr;
*e1Ptr=*e2Ptr;
*e2Ptr=hold;
}
