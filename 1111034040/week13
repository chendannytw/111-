#include <stdio.h>     題1
#define SIZE 20
int binarySearch(int b[], int searchKey, int low, int high);
void sort(int a[], int c[], int size);
void swap(int* ni, int* mi);

// function main begins program execution
int main(void)
{
    int key, result = 0;
    // initialize a
    int a[SIZE] = { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 };
    int c[SIZE] = { 66,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,66,90,11,77 };

    puts("Data items in original order");
    // output original array
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", a[i]);
    }
    printf("\n");
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", c[i]);
    }

    // bubble sort                                         
    // loop to control number of passes                    

    sort(a, c, SIZE);
    puts("\nData items in ascending order");

    // output sorted array
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", a[i]);
    }
    printf("\n");
    for (int i = 0; i < SIZE; ++i) {
        printf("%4d", c[i]);
    }

    puts("");
    printf("請輸入您要的成績");
    scanf_s("%d", &key);
    result = binarySearch(c, key, 0, SIZE - 1);
    if (result < 0)
        printf("查無此成績!!");
    else printf("成績為%d的同學的學號為: %d", key, a[result]);


}


void sort(int a[], int c[], int size)
{
    int hold;
    for (unsigned int pass = 1; pass < SIZE; ++pass) {

        // loop to control number of comparisons per pass   
        for (size_t i = 0; i < size - pass; ++i) {

            // compare adjacent elements and swap them if first 
            // element is greater than second element           
            if (c[i] > c[i + 1]) {
                swap(&c[i], &c[i + 1]);
                swap(&a[i], &a[i + 1]);
            }
        }
    }

}

void swap(int* ni, int* mi)
{
    int nod;
    nod = *ni;
    *ni = *mi;
    *mi = nod;
}

int binarySearch(int b[], int searchKey, int low, int high)
{
    // loop until low index is greater than high index
    while (low <= high) {

        // determine middle element of subarray being searched
        size_t middle = (low + high) / 2;

        // display subarray used in this loop iteration
        //printRow(b, low, middle, high);

        // if searchKey matched middle element, return middle
        if (searchKey == b[middle]) {
            return middle;
        }

        // if searchKey is less than middle element, set new high
        else if (searchKey < b[middle]) {
            high = middle - 1; // search low end of array      
        }

        // if searchKey is greater than middle element, set new low
        else {
            low = middle + 1; // search high end of array        
        }
    } // end while

    return -1; // searchKey not found
}
-----------------------------------------------------------------------------------
#include <iostream>     題2
int id[SIZE] = { 5,7,3,4,10,6,2,8,9,1 };
int math[SIZE] = { 85,67,32,94,100,56,26,87,92,11 };
int notmath[SIZE] = { 99,28,54,63,78,16,54,90,57,32 };
int arv[SIZE];
int end[4][10];



void a(int x[], int y[],int z[],int w[]) {
	void swap(int* element1Ptr, int* element2Ptr);
	int pass;
	for (pass = 1; pass < SIZE; ++pass) {
		for (size_t i = 0; i < SIZE - 1; ++i) {
			if (w[i] > w[i + 1]) {
				swap(&x[i], &x[i + 1]);
				swap(&y[i], &y[i + 1]);
				swap(&z[i], &z[i + 1]);
				swap(&w[i], &w[i + 1]);
			}
		}
	}
	for (int i = 0; i < 20; i++)
	{
		end[0][i] = x[i];
		end[1][i] = y[i];
	}
}
void setvar(int a[],int b[],int c[]) 
{	
	for (size_t i = 0; i < SIZE; i++)
	{
		end[0][i] = id[i];
	}
	for (size_t i = 0; i < SIZE; i++)
	{
		end[1][i] = math[i];
	}
	for (size_t i = 0; i < SIZE; i++)
	{
		end[2][i] = notmath[i];
	}
	for (size_t i = 0; i < SIZE; i++)
	{
		end[3][i] = (end[1][i] + end[2][i]) / 2;
		arv[i] = (end[1][i] + end[2][i]) / 2;
	}
	
}
int main()
{
	setvar(id, math, notmath);
	puts("排序前");
	puts("");
	puts("座號:");
	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", end[0][i]);

	}
	puts("");
	puts("數學:");
	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", end[1][i]);
	}
	puts("");
	puts("計概:");
	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", end[2][i]);
	}
	puts("");
	puts("平均:");
	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", end[3][i]);
	}
	puts("");
	puts("排序後");
	puts("");
	a(id, math, notmath,arv);
	setvar(id, math, notmath);
	printf("名次:");
	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", SIZE - i);
	}
	puts("");
	printf("座號:");
	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", end[0][i]);

	}
	puts("");
	printf("數學:");
	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", end[1][i]);
	}
	puts("");
	printf("計概:");
	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", end[2][i]);
	}
	puts("");
	printf("平均:");
	for (int i = 0; i < SIZE; ++i) {
		printf("%4d", end[3][i]);
	}
	
}
void swap(int* element1Ptr, int* element2Ptr)
{
	int hold = *element1Ptr;
	*element1Ptr = *element2Ptr;
	*element2Ptr = hold;
}
