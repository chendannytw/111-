#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#define SIZE 20

int lost2(int x[], int key, int right, int left);
void lost(int n[], int x[]);

int main(void) {
    int i;
    int n[SIZE] = { 12,13,14,15,16,17,19,21,22,23,24,26,27,28,29,31,32,33,36,37 };
    int x[SIZE] = { 66,67,66,70,73,74,75,75,62,32,44,46,27,12,80,63,66,90,11,66 };
    printf("排序前\n");
    for (i = 0; i < SIZE; ++i)
        printf("%d ", n[i]);
    printf("\n");
    for (i = 0; i < SIZE; ++i)
        printf("%d ", x[i]);
    printf("\n");

    lost(n, x);
    printf("排序後\n");
    for (i = 0; i < SIZE; ++i)
        printf("%d ", n[i]);
    printf("\n");
    for (i = 0; i < SIZE; ++i)
        printf("%d ", x[i]);

    int key;
    printf("\n輸入分數:");
    scanf_s("%d", &key);
    lost2(x, key, 0, SIZE - 1);
    if (lost2(x, key, 0, SIZE - 1) == -1)
        printf("找不到");
    else {
        printf("分數%d座號為%d", key, n[lost2(x, key, 0, SIZE - 1)]);
    }


}
void lost(int n[], int x[]) {
    int hold, pass, i;
    for (pass = 1; pass < SIZE; ++pass) {
        for (i = 0; i < SIZE - pass; ++i) {
            if (x[i] > x[i + 1]) {
                hold = x[i];
                x[i] = x[i + 1];
                x[i + 1] = hold;
                hold = n[i];
                n[i] = n[i + 1];
                n[i + 1] = hold;
            }
        }
    }
}
int lost2(int x[], int key, int low, int high) {
    int mid;
    while (low <= high) {
        mid = (low + high) / 2;
        if (key == x[mid])
            return mid;
        else if (key < x[mid])
            high = mid - 1;
        else
            low = mid + 1;
    }
    return -1;
}
