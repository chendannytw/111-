題目 : (max. 99)建立兩個大小為10的整數陣列，分別存放學生學號以對應的計概成績。寫一個排序副程式，將兩個陣列傳遞至副程式中，依照計概成績由小到大排序，由主程式印出排序後的結果。
// Fig. 6.15: fig06_15.c
// Sorting an array's values into ascending order.
#include <stdio.h>
#define SIZE 10
void sort(int id[],int sc[]);
//int linearSearch(int id[],int sc[],int key);
// function main begins program execution
int main(void) 
{   
   // initialize a
   int     a[SIZE]={2, 6, 4, 8, 10,12,89,68,45,37},i,key,temp; 
   int score[SIZE]={68,42,73,94,84,99,81,78,79,91};

   puts("Data items in original order");
   
   // output original array
   for ( i = 0; i < SIZE; ++i) {
	  printf("\n%4d", a[i]);
	  printf("%4d", score[i]);
   } 
	sort(a,score);
/*	printf("\nPlease input ID: ");
	scanf("%d",&key);
	
	temp=linearSearch(a,score,key);
	if(temp==-1) 
	{
		printf("\nID not found!");
		return 0;
	}

	printf("the ID %d get score %d",a[temp],score[temp]);
*/
  puts("\nData items in ascending order");

   // output sorted array
   for ( i = 0; i < SIZE; ++i) {
      printf("\n%4d", a[i]);
      printf("%4d", score[i]);
   } 
   
   puts("");
}


int linearSearch(int id[],int sc[],int key)   //如果找到， 傳回陣列位址 ，如果找不到就傳回-1 
{
int i;
for(i=0;i<SIZE;i++)
	if(id[i]==key)
		return i;

return -1;	
	
}

void sort(int id[],int sc[])
{int i,pass;
   // bubble sort                                         
   // loop to control number of passes                    
   for ( pass = 1; pass < SIZE; ++pass) {                   
                                                             
      // loop to control number of comparisons per pass   
      for ( i = 0; i < SIZE - 1; ++i) {                     
                                                             
         // compare adjacent elements and swap them if first 
         // element is greater than second element           
         if (sc[i] < sc[i + 1]) {                        
            int hold = sc[i];                                   
            sc[i] = sc[i + 1];                             
            sc[i + 1] = hold;
            
			hold = id[i];                                   
            id[i] = id[i + 1];                             
            id[i + 1] = hold;                               
         }                                       
      }                                   
   }                                      
	
}
