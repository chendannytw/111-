// ConsoleApplication1.cpp : 此檔案包含 'main' 函式。程式會於該處開始執行及結束執行。
//

#include <iostream>

// Fig. 5.3: fig05_03.c
// Creating and using a programmer-defined function.
#include <stdio.h> 

int square(int); // function prototype 函數的原型宣告 
int facto(int);
double exponent(int);
double expon(int,double);
int main(void)
{
	int x;
	// loop 10 times and calculate and output square of x each time
	for (x = 1; x <= 15; ++x) {
		//printf("%d  ", square(x)); // function call  //呼叫函數 
		//printf("\n%d  ", facto(x));
		//printf("\n%lf  ", exponent(x));
		printf("\n%lf  ", expon(10,x));
	}

	puts("");
}

// square function definition returns the square of its parameter 
int square(int y) // y is a copy of the argument to the function
{
	return y * y; // returns the square of y as an int              
}  //函數的定義(本尊) 


int facto(int y) // y is a copy of the argument to the function
{
	int result = 1, i;
	for (i = 1; i <= y; i++)
		result = result * i;
	return result; // returns the square of y as an int              
}  //函數的定義(本尊) 
double exponent(int y) // y is a copy of the argument to the function
{
	int result = 1, i;
	double expo = 1;

	for (i = 1; i <= y; i++) {
		result = result * i;
		expo = expo + (1.0 / result);
	}
	return expo; // returns the square of y as an int              
}  //函數的定義(本尊) 

double expon(int y,double x) // y is a copy of the argument to the function
{
	int result = 1, i;
	double expo = 1,power = 1;

	for (i = 1; i <= y; i++) {
		power = power * x;
		result = result * i;
		expo = expo + (power / result);
	}
	return expo; // returns the square of y as an int              
}  //函數的定義(本尊) 

// 執行程式: Ctrl + F5 或 [偵錯] > [啟動但不偵錯] 功能表
// 偵錯程式: F5 或 [偵錯] > [啟動偵錯] 功能表

// 開始使用的提示: 
//   1. 使用 [方案總管] 視窗，新增/管理檔案
//   2. 使用 [Team Explorer] 視窗，連線到原始檔控制
//   3. 使用 [輸出] 視窗，參閱組建輸出與其他訊息
//   4. 使用 [錯誤清單] 視窗，檢視錯誤
//   5. 前往 [專案] > [新增項目]，建立新的程式碼檔案，或是前往 [專案] > [新增現有項目]，將現有程式碼檔案新增至專案
//   6. 之後要再次開啟此專案時，請前往 [檔案] > [開啟] > [專案]，然後選取 .sln 檔案

